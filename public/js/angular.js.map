{"version":3,"sources":["app.js","services/AnalyticsService.js","services/ExploreService.js","services/InspirationService.js","services/TranslationService.js","controllers/AnalyticsController.js","controllers/ExploreController.js","controllers/InspirationController.js","controllers/TranslationController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"angular.js","sourcesContent":["'use strict';\n\nvar XMovement = angular.module('XMovement', ['ngRoute', 'ngStorage', 'wu.masonry'], function($interpolateProvider) {\n\t$interpolateProvider.startSymbol('<%');\n\t$interpolateProvider.endSymbol('%>');\n})\n\nXMovement.filter('cut', function () {\n\treturn function (value, wordwise, max, tail) {\n\t\tif (!value) return '';\n\n\t\tmax = parseInt(max, 10);\n\t\tif (!max) return value;\n\t\tif (value.length <= max) return value;\n\n\t\tvalue = value.substr(0, max);\n\t\tif (wordwise) {\n\t\t\tvar lastspace = value.lastIndexOf(' ');\n\t\t\tif (lastspace != -1) {\n\t\t\t\t//Also remove . and , so its gives a cleaner result.\n\t\t\t\tif (value.charAt(lastspace-1) == '.' || value.charAt(lastspace-1) == ',') {\n\t\t\t\t\tlastspace = lastspace - 1;\n\t\t\t\t}\n\t\t\t\tvalue = value.substr(0, lastspace);\n\t\t\t}\n\t\t}\n\n\t\treturn value + (tail || ' â€¦');\n\t};\n});\n","XMovement.service('AnalyticsService', function($http, $q) {\n\treturn {\n\t\t'getOverviewAnalytics': function() {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.get('/api/analytics/overview').success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t},\n\t\t'getUserAnalytics': function() {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.get('/api/analytics/users').success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t},\n\t\t'getIdeaAnalytics': function() {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.get('/api/analytics/ideas').success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t}\n\t}})\n","XMovement.service('ExploreService', function($http, $q) {\n\treturn {\n\t\t'getIdeas': function() {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.get('/api/ideas').success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t}\n\t}})\n","XMovement.service('InspirationService', function($http, $q) {\n\treturn {\n\t\t'getInspirations': function() {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.get('/api/inspirations').success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t},\n\t\t'addInspiration': function(body) {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.post('/api/inspiration/add', body).success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t}\n\t}})\n","XMovement.service('TranslationService', function($http, $q) {\n\treturn {\n\t\t'getTranslations': function(params) {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http({\n\t\t\t    url: '/api/translations',\n\t\t\t    method: \"GET\",\n\t\t\t    params: params\n\t\t\t }).success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t},\n\t\t'findTranslations': function(params) {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http({\n\t\t\t    url: '/api/translations/find',\n\t\t\t    method: \"GET\",\n\t\t\t    params: params\n\t\t\t }).success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t},\n\t\t'updateTranslation': function(body) {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.post('/api/translation/update', body).success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t},\n\t\t'exportAllTranslations': function() {\n\t\t\tvar defer = $q.defer();\n\t\t\t$http.get('/api/translations/export').success(function(resp){\n\t\t\t\tdefer.resolve(resp);\n\t\t\t}).error( function(err) {\n\t\t\t\tdefer.reject(err);\n\t\t\t});\n\t\t\treturn defer.promise;\n\t\t}\n\n\t}})\n","XMovement.controller('AnalyticsController', function($scope, $http, $rootScope, $localStorage, $sessionStorage, AnalyticsService) {\n\n\t$scope.$storage = $localStorage.$default({\n\t\tanalytics_type: 'overview'\n\t});\n\n\t$scope.overview = [];\n\t$scope.users = [];\n\t$scope.ideas = [];\n\n\t$scope.headers = {\n\t\tusers: [\n\t\t\t{name: 'Name', type: 'name'},\n\t\t\t{name: 'Email', type: 'email'},\n\t\t\t{name: 'Created', type: 'created_at'},\n\t\t\t{name: 'Ideas', type: 'ideas'},\n\t\t\t{name: 'Tasks', type: 'design_tasks'},\n\t\t\t{name: 'Votes', type: 'design_task_votes'},\n\t\t\t{name: 'Proposals', type: 'proposals'},\n\t\t\t{name: 'Comments', type: 'comments'},\n\t\t],\n\t\tideas: [\n\t\t\t{name: 'Name', type: 'name'},\n\t\t\t{name: 'Creator', type: 'creator'},\n\t\t\t{name: 'Supporters', type: 'supporters'},\n\t\t\t{name: 'Proposals', type: 'proposals'},\n\t\t\t{name: 'Comments', type: 'comments'},\n\t\t\t{name: 'Duration', type: 'duration'},\n\t\t\t{name: 'Tasks', type: 'design_tasks'},\n\t\t\t{name: 'Progress', type: 'progress'},\n\t\t\t{name: 'Share Button Clicks', type: 'share_button_clicks'},\n\t\t\t{name: 'Created', type: 'created'},\n\t\t]\n\t};\n\n\t$scope.getOverviewAnalytics = function() {\n\n\t\tAnalyticsService.getOverviewAnalytics().then(function(response) {\n\n\t\t\t$scope.overview = response.data.overview;\n\n\t\t});\n\n\t}\n\n\t$scope.getUserAnalytics = function() {\n\n\t\tAnalyticsService.getUserAnalytics().then(function(response) {\n\n\t\t\t$scope.users = response.data.users;\n\n\t\t});\n\t}\n\n\t$scope.getIdeaAnalytics = function() {\n\n\t\tAnalyticsService.getIdeaAnalytics().then(function(response) {\n\n\t\t\t$scope.ideas = response.data.ideas;\n\n\t\t\tconsole.log(response.data.ideas[0]);\n\n\t\t});\n\t}\n\n\t$scope.toggleDetailRow = function(user, column) {\n\n\t\tuser.visible_detail_row = (column == user.visible_detail_row) ? '' : column;\n\n\t}\n\n\t$scope.setAnalyticsType = function(analytics_type) {\n\n\t\t$scope.$storage['analytics_type'] = analytics_type;\n\n\t\tswitch ($scope.$storage['analytics_type']) {\n\t\t\tcase 'overview':\n\t\t\t\t$scope.getOverviewAnalytics();\n\t\t\t\tbreak;\n\t\t\tcase 'users':\n\t\t\t\t$scope.getUserAnalytics();\n\t\t\t\tbreak;\n\t\t\tcase 'ideas':\n\t\t\t\t$scope.getIdeaAnalytics();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$scope.getOverviewAnalytics();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t$scope.setAnalyticsType($scope.$storage['analytics_type']);\n\n});\n","XMovement.controller('ExploreController', function($scope, $http, $rootScope, ExploreService) {\n\n\t$scope.ideas = [];\n\n\t$scope.getIdeas = function() {\n\n\t\tconsole.log(\"Loading ideas\");\n\n\t\tExploreService.getIdeas().then(function(response) {\n\n\t\t\tconsole.log(response);\n\n\t\t\t$scope.ideas = response.data.ideas;\n\n\t\t});\n\t}\n\n\t$scope.getIdeas();\n\n});\n","XMovement.controller('InspirationController', function($scope, $http, $rootScope, $sce, InspirationService) {\n\n\t$scope.inspirations = [];\n\t$scope.selected_inspiration = {};\n\t$scope.new_inspiration =\n\t{\n\t\tphoto: {type:'photo',title:'My Test Photo',description:'If you like tests then you will love this test photograph I never took, it was from the interwebs.',content:''},\n\t\tvideo: {type:'video',title:'My Test Video',description:'If you like tests then you will love this test video I never took, it was from the interwebs.',content:''},\n\t\tfile: {type:'file',title:'My Test File',description:'If you like tests then you will love this test file I never took, it was from the interwebs.',content:''},\n\t\tlink: {type:'link',title:'My Test Link',description:'If you like tests then you will love this test link I never took, it was from the interwebs.',content:''}\n\t};\n\n\t$scope.getInspirations = function() {\n\n\t\tconsole.log(\"Loading inspirations\");\n\n\t\tInspirationService.getInspirations().then(function(response) {\n\n\t\t\tconsole.log(response);\n\n\t\t\t// TODO:\n\t\t\t// $scope.selected_inspiration = $scope.inspirations[0];\n\n\t\t\t$scope.inspirations = $scope.formatInspirations(response.data.inspirations);\n\n\t\t\tconsole.log($scope.inspirations);\n\n\t\t\t// $('#masonry-grid').masonry();\n\n\t\t});\n\t}\n\n\t$scope.addInspiration = function(type) {\n\n\t\tconsole.log(\"Adding inspiration\");\n\n\t\t$scope.new_inspiration[type].type = type;\n\n\t\tInspirationService.addInspiration({inspiration: $scope.new_inspiration[type] }).then(function(response) {\n\n\t\t\tconsole.log(response);\n\n\t\t\tif (response.meta.success)\n\t\t\t{\n\t\t\t\t$scope.inspirations.unshift($scope.formatInspirations([response.data.inspiration])[0]);\n\n\t\t\t\t// $('#masonry-grid').imagesLoaded({ background: '.video-tile-image' }).always(function() {\n\t\t\t\t// \t$('#masonry-grid').masonry('reloadItems');\n\t\t\t\t// \t$('#masonry-grid').masonry('layout');\n\t\t\t\t// });\n\n\t\t\t}\n\n\t\t});\n\t}\n\n\t$scope.formatInspirations = function(inspirations) {\n\n\t\tfor (var i = 0; i < inspirations.length; i++)\n\t\t{\n\t\t\tif (inspirations[i].type == 'video')\n\t\t\t{\n\t\t\t\tinspirations[i].content = JSON.parse(inspirations[i].content);\n\t\t\t}\n\t\t}\n\n\t\treturn inspirations;\n\n\t}\n\n\t$scope.openInspirationModal = function(inspiration) {\n\n\t\t$scope.selected_inspiration = inspiration;\n\n\t}\n\n\t$scope.setIframeUrl = function(url) {\n\n\t\treturn $sce.trustAsResourceUrl(url);\n\t}\n\n\t$scope.getInspirations();\n\n});\n","XMovement.controller('TranslationController', function($scope, $http, $rootScope, $timeout, TranslationService) {\n\n\t$scope.translations = [];\n\n\t$scope.getTranslations = function() {\n\n\t\tconsole.log(\"Loading translations\");\n\n\t\t$scope.translations = [];\n\n\t\tTranslationService.getTranslations({ override : false }).then(function(response) {\n\n\t\t\tconsole.log(response);\n\n\t\t\t$scope.translations = response.data.translations;\n\n\t\t\tsetTimeout(function() { $('textarea').expanding(); }, 500);\n\n\t\t});\n\t}\n\n\t$scope.findTranslations = function($event) {\n\n\t\tconsole.log(\"Finding translations\");\n\n\t\t$($event.target).html('Finding..');\n\n\t\t$timeout(function () {\n\n\t\t\tTranslationService.findTranslations().then(function(response) {\n\n\t\t\t\tconsole.log(response);\n\n\t\t\t\t$($event.target).html('Find');\n\n\t\t\t\talert('Find complete');\n\n\t\t\t});\n\n\t\t}, 1000);\n\t}\n\n\t$scope.updateTranslation = function(translation) {\n\n\t\tconsole.log('Updating translation');\n\n\t\ttranslation.state = 'loading';\n\n\t\ttranslation.value = translation.original;\n\n\t\tTranslationService.updateTranslation({ translation : translation }).then(function(response) {\n\n\t\t\ttranslation.state = 'updated';\n\n\t\t\tconsole.log(response);\n\n\t\t});\n\t}\n\n\t$scope.importTranslations = function($event) {\n\n\t\tconsole.log(\"Importing translations\");\n\n\t\t$($event.target).html('Importing..');\n\n\t\t$scope.translations = [];\n\n\t\t$timeout(function () {\n\n\t\t\tTranslationService.getTranslations({ override : true }).then(function(response) {\n\n\t\t\t\tconsole.log(response);\n\n\t\t\t\t$scope.translations = response.data.translations;\n\n\t\t\t\tsetTimeout(function() { $('textarea').expanding(); }, 500);\n\n\t\t\t\t$($event.target).html('Import');\n\n\t\t\t\talert('Import complete');\n\n\t\t\t});\n\n\t\t}, 1000);\n\n\t}\n\n\t$scope.exportAllTranslations = function($event) {\n\n\t\tconsole.log('Exporting all translations');\n\n\t\t$($event.target).html('Exporting..');\n\n\t\t$timeout(function () {\n\n\t\t\tTranslationService.exportAllTranslations().then(function(response) {\n\n\t\t\t\tconsole.log(response);\n\n\t\t\t\t$($event.target).html('Export');\n\n\t\t\t\talert('Export complete');\n\n\t\t\t});\n\n\t\t}, 1000);\n\n\t}\n\n\t$scope.getTranslations();\n\n});\n"],"sourceRoot":"/source/"}